(metadata
  title "art1352"
  description "early non-changing example"
  author "indy"
  created "2013-12-29")

(define squ 
  (lambda (angle colour box-radius)
    (begin (set-colour colour)
        (scope (rotate angle)
               (translate 0.0 (/ canvas-height 5))
               (rect (* -1.0 box-radius) (* -1.0 box-radius) box-radius box-radius))
      (let ((br2 box-radius)
            (ang (+ (* 10.0 [1.0]) 10.0))
            (to-center-factor (/ (/ canvas-height 5) 13.3333))
            (shrink-factor (+ (* [0.5] 0.4) 0.5))
            (ang-delta 8.0))
        (do-times i 10
                  (set! br2 (* br2 shrink-factor))
                  (set! ang (+ ang ang-delta))
                  (scope (rotate (- angle ang))
                         (translate 0.0 (- (/ canvas-height 5) (* (as-float i) to-center-factor)))
                         (rect (* -1.0 br2) (* -1.0 br2) br2 br2))
                  (scope (rotate (+ angle ang))
                         (translate 0.0 (- (/ canvas-height 5) (* (as-float i) to-center-factor)))
                         (rect (* -1.0 br2) (* -1.0 br2) br2 br2)))))))

(let ((primary (colour [0.1] [0.6] [0.8] 0.3))
      (triads (triad primary))
      (box-radius (/ canvas-width 12.0))
      (focal-x (/ canvas-width 2.0))
      (focal-y (/ canvas-height 2.0))
      (angle 0.0))
  (do-times i 3
            (scope (translate focal-x focal-y)
                   (squ angle (nth triads i) box-radius)
                   (set! angle (+ angle (/ 360.0 3.0))))))
